


let name='lokesh'
console.log(typeof name)

const fruits=['banana','apple','mango','grapes']
const length=fruits.filter(fruit=>fruit.length>5)
console.log(length)

let num=4
if(num>0){
  console.log(`${num} is a positive number`)
}else{
  console.log(`${num} is a negative number`)
}

const numbers=[1,2,3,4,5,6,7,8,9,10]
const even=numbers.filter(num=>num%2===0)
console.log(even)
const square=numbers.map(num=>num*num)
console.log(square)

const n=[1,2,3,4,5]
const a=[]
for(let i =0;i<n.length;i++){
a.push(n[i])
}
console.log(a)

let i=0
while(i<=5){
  console.log(i)
  i++
}


//callback functions
greet=(name)=>{
    console.log("hello "+name)
  return name
}

input=(callback)=>{
   const name='alice'
   setTimeout(()=>{
    callback(name)
   },2000)
 
}
input(greet)



const doSomething = callback => {
    setTimeout(() => {
      const skills = ['HTML', 'CSS', 'JS']
      callback(false, skills)
    }, 2000)
  }
  
  const callback = (err, result) => {
    if (err) {
      return console.log(err)
    }
    return console.log(result)
  }
  
  doSomething(callback)



//promise constructor

  const doPromise=new Promise((resolve,reject)=>{
    setTimeout(()=>{
        const skills=['html','css','js']
        if(skills.includes('html')){
            resolve('fullstack developer')
        }else{
            reject('something has happend')
        }
    },2000)
  })
  doPromise.then(result=>console.log(result))
  .catch(error=>console.log(error))



  //aync and await
  const square = async function (n) {
    return n * n
  }
 const main =async()=>{
  const value = await square(2)
  console.log(value)
  }
  main() 